## Data Structure
	1.Array
		>> colect multiple data as Sequential in the same variable
			var myArray [3]string
			myArray[0] = "A"
			myArray[1] = "B"
			myArray[2] = "C"
			
			fmt.Println(myArray)		// [A B C]
			fmt.Println(myArray[1])		// B
			fmt.Println(len(myArray))	// lenght of the Array = 3



	2.Slice
		>> the same way with Array but neccessary to set data size
			var mySlice []int{10, 20, 30, 40, 50}

			fmt.Println(mySlice)			// [10 20 30]
			fmt.Println(len(mySlice))		// lenght of the Slice = 5
			fmt.Println(cap(mySlice))		// capacity of the Slice = 5

			subSlice := mySlice[1:3]		// [20 30]
			fmt.Println(len(subSlice))		// lenght of the Slice = 2
			fmt.Println(cap(subSlice))		// capacity of the Slice = 4  -->  [20, 30, 40, 50] = 4

			mySlice = append(mySlice, 60)
			fmt.Println(mySlice)			// [10, 20, 30, 40, 50, 60]


			mySlice2 := myArray[:]
			mySlice2 = append(mySlice2, "D", "E")
			fmt.Println(mySlice2)			// [A, B, C, D, E]



	3.Map
		>> similiar with dictionary to collect data as key and value
			myMap := make(map[string]int)
			myMap["apple"] = 5
			myMap["banana"] = 10
			myMap["orange"] = 8

			fmt.Println(myMap)				// map[apple:5, banana:10, orange:8]

			for key, value := range myMap {
				fmt.Printf("%s --> %d\n", key, value)
			}
			// apple --> 5
			// banana --> 10
			// orange --> 8

			delete(myMap, "banana")


			# Checking if a key exists
			val, ok := myMap["pear"]
			if ok {
				fmt.Printf("Pear's value:", val)
			} else {
				fmt.Printf("Pear was not found in map")
			}
 


	4.Struct
		>> a variable that consists of variable group to be a variable (similiar with Object) by set feild and type
			type Person struct {
				Name string
				Age int
			}



	5.Function
		>> 
			var squareFunc func(int) int = square



	6.Interface
		>> data type that define set of method to use this data type
			type Shape interface {
				Area() float64
				Perimeter() float64
			}



	7.Poiter
		>> data type to collect the memory address of variable
			var p *int



	8.Channel
		>> data type for the communication between gorountines (for concurrent thread of Go execution). By set chan int





